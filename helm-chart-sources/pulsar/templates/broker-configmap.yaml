#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "pulsar.name" . }}
    chart: {{ template "pulsar.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.broker.component }}
    cluster: {{ template "pulsar.fullname" . }}
data:
  zookeeperServers:
    {{- $global := . }}
    {{ range $i, $e := until (.Values.zookeeper.replicaCount | int) }}{{ if ne $i 0 }},{{ end }}{{ template "pulsar.fullname" $global }}-{{ $global.Values.zookeeper.component }}-{{ printf "%d" $i }}.{{ template "pulsar.fullname" $global }}-{{ $global.Values.zookeeper.component }}{{ end }}
  configurationStoreServers:
    {{- $global := . }}
    {{ range $i, $e := until (.Values.zookeeper.replicaCount | int) }}{{ if ne $i 0 }},{{ end }}{{ template "pulsar.fullname" $global }}-{{ $global.Values.zookeeper.component }}-{{ printf "%d" $i }}.{{ template "pulsar.fullname" $global }}-{{ $global.Values.zookeeper.component }}{{ end }}
  clusterName: {{ template "pulsar.fullname" . }}
  functionsWorkerEnabled: "{{ .Values.broker.functionsWorkerEnabled }}"
  PF_pulsarFunctionsCluster: {{ template "pulsar.fullname" . }}
  allowAutoTopicCreationType: "non-partitioned"
  {{- if .Values.enableTokenAuth }}
  PF_clientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  PF_clientAuthenticationParameters: "file:///pulsar/token-superuser/superuser.jwt"
  # For client conf so that we can run pulsar-admin health check
  authParams: "file:///pulsar/token-superuser-stripped.jwt"
  authPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  authorizationEnabled: "true"
  authenticationEnabled: "true"
  authenticationProviders: "org.apache.pulsar.broker.authentication.AuthenticationProviderToken,org.apache.pulsar.broker.authentication.AuthenticationProviderTls"
  proxyRoles: "{{ .Values.proxyRoles }}"
  superUserRoles: "{{ .Values.superUserRoles }}" 
  tokenPublicKey: "file:///pulsar/token-public-key/my-public.key"
  brokerClientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  brokerClientAuthenticationParameters: "file:///pulsar/token-superuser/superuser.jwt"
  {{- end }}
{{- if .Values.enableTls }}
  PF_useTls: "true"
  tlsEnabled: "true"
  tlsCertificateFilePath: /pulsar/certs/tls.crt
  tlsKeyFilePath: /pulsar/tls-pk8.key
  tlsTrustCertsFilePath: "/etc/ssl/certs/{{ .Values.tlsCaCert }}"
  tlsProtocols: "TLSv1.2,TLSv1.1"
  brokerServicePortTls: "6651"
  webServicePortTls: "8443"
  brokerClientTrustCertsFilePath: "/etc/ssl/certs/{{ .Values.tlsCaCert }}"
  PF_pulsarServiceUrl: "pulsar+ssl://localhost:6651"
  PF_pulsarWebServiceUrl: "https://localhost:8443"
{{- else }}
  PF_pulsarServiceUrl: "pulsar://localhost:6650"
  PF_pulsarWebServiceUrl: "http://localhost:8080"
{{- end }}
{{- if .Values.storageOffload }}
  managedLedgerOffloadDriver: "{{ .Values.storageOffload.driver }}" 
  s3ManagedLedgerOffloadBucket: "{{ .Values.storageOffload.bucket }}" 
  s3ManagedLedgerOffloadRegion: "{{ .Values.storageOffload.region }}" 
  AWS_ACCESS_KEY_ID: "{{ .Values.storageOffload.accessKey }}" 
  AWS_SECRET_ACCESS_KEY: "{{ .Values.storageOffload.accessSecret }}" 
{{- if .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}
  managedLedgerOffloadDeletionLagMs: "{{ .Values.storageOffload.managedLedgerOffloadDeletionLagMs }}" 
{{- end }}
{{- if .Values.storageOffload.maxBlockSizeInBytes }}
  maxBlockSizeInBytes: "{{ .Values.storageOffload.maxBlockSizeInBytes }}" 
{{- end }}
{{- if .Values.storageOffload.readBufferSizeInBytes }}
  readBufferSizeInBytes: "{{ .Values.storageOffload.readBufferSizeInBytes }}" 
{{- end }}
{{- end }}
{{ toYaml .Values.broker.configData | indent 2 }}
